--- newt-0.52.14/Makefile.in.0005~	2011-11-11 12:00:15.000000000 +0100
+++ newt-0.52.14/Makefile.in	2012-09-22 16:21:58.456370948 +0200
@@ -1,4 +1,12 @@
+ifneq ($(WHOLE_PROGRAM),)
+slang_srcdir = /usr/src/slang
+include $(slang_srcdir)/Makefile
+SLANG_SRC := $(subst .o,.c,$(patsubst %,/usr/src/slang/%,$(OFILES)))
+LIBS = -lm -ldl -lc @LIBS@
+else
 LIBS = -lslang @LIBS@
+endif
+
 LIBTCL = @TCL_LIB_FLAG@
 
 CC = @CC@
@@ -32,6 +40,10 @@ else
 SHLIBFLAGS=
 endif
 
+ifneq ($(WHOLE_PROGRAM),)
+SHLIBFLAGS += -fwhole-program -Wl,-O2 -flto -Wl,--no-warn-common
+endif
+
 SHCFLAGS = -fPIC
 
 prefix = @prefix@
@@ -51,7 +63,11 @@ instroot ?= $(DESTDIR)
 SOURCES = $(subst .o,.c,$(TESTOBJS) $(NDIALOGOBJS) $(LIBOBJS))
 
 SHAREDDIR = shared
+ifneq ($(WHOLE_PROGRAM),)
+SHAREDOBJS = $(subst .o,.c,$(LIBOBJS))
+else
 SHAREDOBJS = $(patsubst %,$(SHAREDDIR)/%, $(LIBOBJS))
+endif
 
 ifeq (.depend,$(wildcard .depend))
 TARGET=$(PROGS)
@@ -115,7 +131,11 @@ $(SHAREDDIR):
 sharedlib: $(LIBNEWTSH)
 
 $(LIBNEWTSH): $(SHAREDDIR) $(SHAREDOBJS)
+ifneq ($(WHOLE_PROGRAM),)
+	$(CC) -shared -o $(LIBNEWTSH) $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) $(SHLIBFLAGS) $(SHAREDOBJS) $(SLANG_SRC) $(LIBS)
+else
 	$(CC) -shared -o $(LIBNEWTSH) $(SHLIBFLAGS) $(SHAREDOBJS) $(LDFLAGS) $(LIBS)
+endif
 	ln -fs $(LIBNEWTSONAME) libnewt.so
 	ln -fs $(LIBNEWTSH) $(LIBNEWTSONAME)
 
--- newt-0.52.14/newt.h.0005~	2011-11-11 12:00:15.000000000 +0100
+++ newt-0.52.14/newt.h	2012-09-22 16:35:00.487674491 +0200
@@ -101,124 +101,125 @@ enum newtFlagsSense { NEWT_FLAGS_SET, NE
 
 #define newtListboxAddEntry	newtListboxAppendEntry
 
+#define EXPORTED __attribute__((externally_visible))
 
 typedef struct newtComponent_struct * newtComponent;
 
-extern const struct newtColors newtDefaultColorPalette;
+extern const struct newtColors newtDefaultColorPalette EXPORTED;
 
 typedef void (*newtCallback)(newtComponent, void *);
 typedef void (*newtSuspendCallback)(void * data);
 
-int newtInit(void);
-int newtFinished(void);
-void newtCls(void);
-void newtResizeScreen(int redraw);
-void newtWaitForKey(void);
-void newtClearKeyBuffer(void);
-void newtDelay(unsigned int usecs);
+int newtInit(void) EXPORTED;
+int newtFinished(void) EXPORTED;
+void newtCls(void) EXPORTED;
+void newtResizeScreen(int redraw) EXPORTED;
+void newtWaitForKey(void) EXPORTED;
+void newtClearKeyBuffer(void) EXPORTED;
+void newtDelay(unsigned int usecs) EXPORTED;
 /* top, left are *not* counting the border */
 int newtOpenWindow(int left,int top, 
 		   unsigned int width,unsigned  int height, 
- 		  const char * title);
-int newtCenteredWindow(unsigned int width,unsigned int height, const char * title);
-void newtPopWindow(void);
-void newtPopWindowNoRefresh(void);
-void newtSetColors(struct newtColors colors);
-void newtSetColor(int colorset, char *fg, char *bg);
-void newtRefresh(void);
-void newtSuspend(void);
-void newtSetSuspendCallback(newtSuspendCallback cb, void * data);
-void newtSetHelpCallback(newtCallback cb);
-int  newtResume(void);
-void newtPushHelpLine(const char * text);
-void newtRedrawHelpLine(void);
-void newtPopHelpLine(void);
-void newtDrawRootText(int col, int row, const char * text);
-void newtBell(void);
-void newtCursorOff(void);
-void newtCursorOn(void);
+ 		  const char * title) EXPORTED;
+int newtCenteredWindow(unsigned int width,unsigned int height, const char * title) EXPORTED;
+void newtPopWindow(void) EXPORTED;
+void newtPopWindowNoRefresh(void) EXPORTED;
+void newtSetColors(struct newtColors colors) EXPORTED;
+void newtSetColor(int colorset, char *fg, char *bg) EXPORTED;
+void newtRefresh(void) EXPORTED;
+void newtSuspend(void) EXPORTED;
+void newtSetSuspendCallback(newtSuspendCallback cb, void * data) EXPORTED;
+void newtSetHelpCallback(newtCallback cb) EXPORTED;
+int  newtResume(void) EXPORTED;
+void newtPushHelpLine(const char * text) EXPORTED;
+void newtRedrawHelpLine(void) EXPORTED;
+void newtPopHelpLine(void) EXPORTED;
+void newtDrawRootText(int col, int row, const char * text) EXPORTED;
+void newtBell(void) EXPORTED;
+void newtCursorOff(void) EXPORTED;
+void newtCursorOn(void) EXPORTED;
 
 /* Components */
 
-newtComponent newtCompactButton(int left, int top, const char * text);
-newtComponent newtButton(int left, int top, const char * text);
+newtComponent newtCompactButton(int left, int top, const char * text) EXPORTED;
+newtComponent newtButton(int left, int top, const char * text) EXPORTED;
 newtComponent newtCheckbox(int left, int top, const char * text, char defValue,
-			   const char * seq, char * result);
-char newtCheckboxGetValue(newtComponent co);
-void newtCheckboxSetValue(newtComponent co, char value);
-void newtCheckboxSetFlags(newtComponent co, int flags, enum newtFlagsSense sense);
+			   const char * seq, char * result) EXPORTED;
+char newtCheckboxGetValue(newtComponent co) EXPORTED;
+void newtCheckboxSetValue(newtComponent co, char value) EXPORTED;
+void newtCheckboxSetFlags(newtComponent co, int flags, enum newtFlagsSense sense) EXPORTED;
 
     
 newtComponent newtRadiobutton(int left, int top, const char * text, int isDefault,
-			      newtComponent prevButton);
-newtComponent newtRadioGetCurrent(newtComponent setMember);
-void newtRadioSetCurrent(newtComponent setMember);
+			      newtComponent prevButton) EXPORTED;
+newtComponent newtRadioGetCurrent(newtComponent setMember) EXPORTED;
+void newtRadioSetCurrent(newtComponent setMember) EXPORTED;
 newtComponent newtListitem(int left, int top, const char * text, int isDefault,
-			      newtComponent prevItem, const void * data, int flags);
-void newtListitemSet(newtComponent co, const char * text);
-void * newtListitemGetData(newtComponent co);
-void newtGetScreenSize(int * cols, int * rows);
-
-newtComponent newtLabel(int left, int top, const char * text);
-void newtLabelSetText(newtComponent co, const char * text);
-void newtLabelSetColors(newtComponent co, int colorset);
+			      newtComponent prevItem, const void * data, int flags) EXPORTED;
+void newtListitemSet(newtComponent co, const char * text) EXPORTED;
+void * newtListitemGetData(newtComponent co) EXPORTED;
+void newtGetScreenSize(int * cols, int * rows) EXPORTED;
+
+newtComponent newtLabel(int left, int top, const char * text) EXPORTED;
+void newtLabelSetText(newtComponent co, const char * text) EXPORTED;
+void newtLabelSetColors(newtComponent co, int colorset) EXPORTED;
 newtComponent newtVerticalScrollbar(int left, int top, int height,
-				    int normalColorset, int thumbColorset);
-void newtScrollbarSet(newtComponent co, int where, int total);
-void newtScrollbarSetColors(newtComponent co, int normal, int thumb);
-
-newtComponent newtListbox(int left, int top, int height, int flags);
-void * newtListboxGetCurrent(newtComponent co);
-void newtListboxSetCurrent(newtComponent co, int num);
-void newtListboxSetCurrentByKey(newtComponent co, void * key);
-void newtListboxSetEntry(newtComponent co, int num, const char * text);
-void newtListboxSetWidth(newtComponent co, int width);
-void newtListboxSetData(newtComponent co, int num, void * data);
+				    int normalColorset, int thumbColorset) EXPORTED;
+void newtScrollbarSet(newtComponent co, int where, int total) EXPORTED;
+void newtScrollbarSetColors(newtComponent co, int normal, int thumb) EXPORTED;
+
+newtComponent newtListbox(int left, int top, int height, int flags) EXPORTED;
+void * newtListboxGetCurrent(newtComponent co) EXPORTED;
+void newtListboxSetCurrent(newtComponent co, int num) EXPORTED;
+void newtListboxSetCurrentByKey(newtComponent co, void * key) EXPORTED;
+void newtListboxSetEntry(newtComponent co, int num, const char * text) EXPORTED;
+void newtListboxSetWidth(newtComponent co, int width) EXPORTED;
+void newtListboxSetData(newtComponent co, int num, void * data) EXPORTED;
 int newtListboxAppendEntry(newtComponent co, const char * text, 
-			   const void * data);
+			   const void * data) EXPORTED;
 /* Send the key to insert after, or NULL to insert at the top */
-int newtListboxInsertEntry(newtComponent co, const char * text, const void * data, void * key);
-int newtListboxDeleteEntry(newtComponent co, void * data);
-void newtListboxClear(newtComponent co); /* removes all entries from listbox */
-void newtListboxGetEntry(newtComponent co, int num, char **text, void **data);
+int newtListboxInsertEntry(newtComponent co, const char * text, const void * data, void * key) EXPORTED;
+int newtListboxDeleteEntry(newtComponent co, void * data) EXPORTED;
+void newtListboxClear(newtComponent co) EXPORTED; /* removes all entries from listbox */
+void newtListboxGetEntry(newtComponent co, int num, char **text, void **data) EXPORTED;
 /* Returns an array of data pointers from items, last element is NULL */
-void **newtListboxGetSelection(newtComponent co, int *numitems);
-void newtListboxClearSelection(newtComponent co);
+void **newtListboxGetSelection(newtComponent co, int *numitems) EXPORTED;
+void newtListboxClearSelection(newtComponent co) EXPORTED;
 void newtListboxSelectItem(newtComponent co, const void * key,
-	enum newtFlagsSense sense);
+	enum newtFlagsSense sense) EXPORTED;
 /* Returns number of items currently in listbox. */
-int newtListboxItemCount(newtComponent co);
+int newtListboxItemCount(newtComponent co) EXPORTED;
 
-newtComponent newtCheckboxTree(int left, int top, int height, int flags);
-newtComponent newtCheckboxTreeMulti(int left, int top, int height, char *seq, int flags);
-const void ** newtCheckboxTreeGetSelection(newtComponent co, int *numitems);
-const void * newtCheckboxTreeGetCurrent(newtComponent co);
-void newtCheckboxTreeSetCurrent(newtComponent co, void * item);
-const void ** newtCheckboxTreeGetMultiSelection(newtComponent co, int *numitems, char seqnum);
+newtComponent newtCheckboxTree(int left, int top, int height, int flags) EXPORTED;
+newtComponent newtCheckboxTreeMulti(int left, int top, int height, char *seq, int flags) EXPORTED;
+const void ** newtCheckboxTreeGetSelection(newtComponent co, int *numitems) EXPORTED;
+const void * newtCheckboxTreeGetCurrent(newtComponent co) EXPORTED;
+void newtCheckboxTreeSetCurrent(newtComponent co, void * item) EXPORTED;
+const void ** newtCheckboxTreeGetMultiSelection(newtComponent co, int *numitems, char seqnum) EXPORTED;
 /* last item is NEWT_ARG_LAST for all of these */
 int newtCheckboxTreeAddItem(newtComponent co, 
 			    const char * text, const void * data,
-			    int flags, int index, ...);
+			    int flags, int index, ...) EXPORTED;
 int newtCheckboxTreeAddArray(newtComponent co, 
 			     const char * text, const void * data,
-			     int flags, int * indexes);
-int * newtCheckboxTreeFindItem(newtComponent co, void * data);
+			     int flags, int * indexes) EXPORTED;
+int * newtCheckboxTreeFindItem(newtComponent co, void * data) EXPORTED;
 void newtCheckboxTreeSetEntry(newtComponent co, const void * data,
-			      const char * text);
-void newtCheckboxTreeSetWidth(newtComponent co, int width);
-char newtCheckboxTreeGetEntryValue(newtComponent co, const void * data);
+			      const char * text) EXPORTED;
+void newtCheckboxTreeSetWidth(newtComponent co, int width) EXPORTED;
+char newtCheckboxTreeGetEntryValue(newtComponent co, const void * data) EXPORTED;
 void newtCheckboxTreeSetEntryValue(newtComponent co, const void * data,
-				   char value);
+				   char value) EXPORTED;
  
 newtComponent newtTextboxReflowed(int left, int top, char * text, int width,
-				  int flexDown, int flexUp, int flags);
-newtComponent newtTextbox(int left, int top, int width, int height, int flags);
-void newtTextboxSetText(newtComponent co, const char * text);
-void newtTextboxSetHeight(newtComponent co, int height);
-int newtTextboxGetNumLines(newtComponent co);
-void newtTextboxSetColors(newtComponent co, int normal, int active);
+				  int flexDown, int flexUp, int flags) EXPORTED;
+newtComponent newtTextbox(int left, int top, int width, int height, int flags) EXPORTED;
+void newtTextboxSetText(newtComponent co, const char * text) EXPORTED;
+void newtTextboxSetHeight(newtComponent co, int height) EXPORTED;
+int newtTextboxGetNumLines(newtComponent co) EXPORTED;
+void newtTextboxSetColors(newtComponent co, int normal, int active) EXPORTED;
 char * newtReflowText(char * text, int width, int flexDown, int flexUp,
-		      int * actualWidth, int * actualHeight);
+		      int * actualWidth, int * actualHeight) EXPORTED;
 
 struct newtExitStruct {
     enum { NEWT_EXIT_HOTKEY, NEWT_EXIT_COMPONENT, NEWT_EXIT_FDREADY,
@@ -230,52 +231,52 @@ struct newtExitStruct {
     } u;
 } ;
 
-newtComponent newtForm(newtComponent vertBar, void * helpTag, int flags);
-void newtFormSetTimer(newtComponent form, int millisecs);
-void newtFormWatchFd(newtComponent form, int fd, int fdFlags);
-void newtFormSetSize(newtComponent co);
-newtComponent newtFormGetCurrent(newtComponent co);
-void newtFormSetBackground(newtComponent co, int color);
-void newtFormSetCurrent(newtComponent co, newtComponent subco);
-void newtFormAddComponent(newtComponent form, newtComponent co);
-void newtFormAddComponents(newtComponent form, ...);
-void newtFormSetHeight(newtComponent co, int height);
-void newtFormSetWidth(newtComponent co, int width);
-newtComponent newtRunForm(newtComponent form);		/* obsolete */
-void newtFormRun(newtComponent co, struct newtExitStruct * es);
-void newtDrawForm(newtComponent form);
-void newtFormAddHotKey(newtComponent co, int key);
+newtComponent newtForm(newtComponent vertBar, void * helpTag, int flags) EXPORTED;
+void newtFormSetTimer(newtComponent form, int millisecs) EXPORTED;
+void newtFormWatchFd(newtComponent form, int fd, int fdFlags) EXPORTED;
+void newtFormSetSize(newtComponent co) EXPORTED;
+newtComponent newtFormGetCurrent(newtComponent co) EXPORTED;
+void newtFormSetBackground(newtComponent co, int color) EXPORTED;
+void newtFormSetCurrent(newtComponent co, newtComponent subco) EXPORTED;
+void newtFormAddComponent(newtComponent form, newtComponent co) EXPORTED;
+void newtFormAddComponents(newtComponent form, ...) EXPORTED;
+void newtFormSetHeight(newtComponent co, int height) EXPORTED;
+void newtFormSetWidth(newtComponent co, int width) EXPORTED;
+newtComponent newtRunForm(newtComponent form) EXPORTED;		/* obsolete */
+void newtFormRun(newtComponent co, struct newtExitStruct * es) EXPORTED;
+void newtDrawForm(newtComponent form) EXPORTED;
+void newtFormAddHotKey(newtComponent co, int key) EXPORTED;
 
 typedef int (*newtEntryFilter)(newtComponent entry, void * data, int ch,
 			       int cursor);
 newtComponent newtEntry(int left, int top, const char * initialValue, int width,
-			const char ** resultPtr, int flags);
-void newtEntrySet(newtComponent co, const char * value, int cursorAtEnd);
-void newtEntrySetFilter(newtComponent co, newtEntryFilter filter, void * data);
-char * newtEntryGetValue(newtComponent co);
-void newtEntrySetFlags(newtComponent co, int flags, enum newtFlagsSense sense);
-void newtEntrySetColors(newtComponent co, int normal, int disabled);
-
-newtComponent newtScale(int left, int top, int width, long long fullValue);
-void newtScaleSet(newtComponent co, unsigned long long amount);
-void newtScaleSetColors(newtComponent co, int empty, int full);
+			const char ** resultPtr, int flags) EXPORTED;
+void newtEntrySet(newtComponent co, const char * value, int cursorAtEnd) EXPORTED;
+void newtEntrySetFilter(newtComponent co, newtEntryFilter filter, void * data) EXPORTED;
+char * newtEntryGetValue(newtComponent co) EXPORTED;
+void newtEntrySetFlags(newtComponent co, int flags, enum newtFlagsSense sense) EXPORTED;
+void newtEntrySetColors(newtComponent co, int normal, int disabled) EXPORTED;
+
+newtComponent newtScale(int left, int top, int width, long long fullValue) EXPORTED;
+void newtScaleSet(newtComponent co, unsigned long long amount) EXPORTED;
+void newtScaleSetColors(newtComponent co, int empty, int full) EXPORTED;
 
-void newtComponentAddCallback(newtComponent co, newtCallback f, void * data);
-void newtComponentTakesFocus(newtComponent co, int val);
+void newtComponentAddCallback(newtComponent co, newtCallback f, void * data) EXPORTED;
+void newtComponentTakesFocus(newtComponent co, int val) EXPORTED;
 
 /* This callback is called when a component is destroyed. */
 void newtComponentAddDestroyCallback(newtComponent co,
-				      newtCallback f, void * data);
+				      newtCallback f, void * data) EXPORTED;
 
 /* this also destroys all of the components (including other forms) on the 
    form */
-void newtFormDestroy(newtComponent form);	
+void newtFormDestroy(newtComponent form) EXPORTED;
 
 /* NB: You SHOULD NOT call this for components which have been added
  * to a form (ie. almost all components).  They are destroyed along
  * with the form when you call newtFormDestroy.
  */
-void newtComponentDestroy(newtComponent co);
+void newtComponentDestroy(newtComponent co) EXPORTED;
 
 /* Key codes */
 
@@ -328,53 +329,53 @@ typedef struct grid_s * newtGrid;
 enum newtGridElement { NEWT_GRID_EMPTY = 0,
 		       NEWT_GRID_COMPONENT, NEWT_GRID_SUBGRID };
 
-newtGrid newtCreateGrid(int cols, int rows);
+newtGrid newtCreateGrid(int cols, int rows) EXPORTED;
 /* TYPE, what, TYPE, what, ..., NULL */
-newtGrid newtGridVStacked(enum newtGridElement type, void * what, ...);
-newtGrid newtGridVCloseStacked(enum newtGridElement type, void * what, ...);
-newtGrid newtGridHStacked(enum newtGridElement type1, void * what1, ...);
-newtGrid newtGridHCloseStacked(enum newtGridElement type1, void * what1, ...);
+newtGrid newtGridVStacked(enum newtGridElement type, void * what, ...) EXPORTED;
+newtGrid newtGridVCloseStacked(enum newtGridElement type, void * what, ...) EXPORTED;
+newtGrid newtGridHStacked(enum newtGridElement type1, void * what1, ...) EXPORTED;
+newtGrid newtGridHCloseStacked(enum newtGridElement type1, void * what1, ...) EXPORTED;
 newtGrid newtGridBasicWindow(newtComponent text, newtGrid middle,
-			     newtGrid buttons);
+			     newtGrid buttons) EXPORTED;
 newtGrid newtGridSimpleWindow(newtComponent text, newtComponent middle,
-			     newtGrid buttons);
+			     newtGrid buttons) EXPORTED;
 void newtGridSetField(newtGrid grid, int col, int row, 
 		      enum newtGridElement type, void * val, int padLeft,
 		      int padTop, int padRight, int padBottom, int anchor,
-		      int flags);
-void newtGridPlace(newtGrid grid, int left, int top);
+		      int flags) EXPORTED;
+void newtGridPlace(newtGrid grid, int left, int top) EXPORTED;
 #define newtGridDestroy newtGridFree
-void newtGridFree(newtGrid grid, int recurse);
-void newtGridGetSize(newtGrid grid, int * width, int * height);
-void newtGridWrappedWindow(newtGrid grid, char * title);
-void newtGridWrappedWindowAt(newtGrid grid, char * title, int left, int top);
+void newtGridFree(newtGrid grid, int recurse) EXPORTED;
+void newtGridGetSize(newtGrid grid, int * width, int * height) EXPORTED;
+void newtGridWrappedWindow(newtGrid grid, char * title) EXPORTED;
+void newtGridWrappedWindowAt(newtGrid grid, char * title, int left, int top) EXPORTED;
 void newtGridAddComponentsToForm(newtGrid grid, newtComponent form, 
-				 int recurse);
+				 int recurse) EXPORTED;
 
 /* convienve */
-newtGrid newtButtonBarv(char * button1, newtComponent * b1comp, va_list args);
-newtGrid newtButtonBar(char * button1, newtComponent * b1comp, ...);
+newtGrid newtButtonBarv(char * button1, newtComponent * b1comp, va_list args) EXPORTED;
+newtGrid newtButtonBar(char * button1, newtComponent * b1comp, ...) EXPORTED;
 
 /* automatically centered and shrink wrapped */
-void newtWinMessage(char * title, char * buttonText, char * text, ...);
+void newtWinMessage(char * title, char * buttonText, char * text, ...) EXPORTED;
 void newtWinMessagev(char * title, char * buttonText, char * text, 
-		     va_list argv);
+		     va_list argv) EXPORTED;
 
 /* having separate calls for these two seems silly, but having two separate
    variable length-arg lists seems like a bad idea as well */
 
 /* Returns 0 if F12 was pressed, 1 for button1, 2 for button2 */
 int newtWinChoice(char * title, char * button1, char * button2, 
-		   char * text, ...);
+		   char * text, ...) EXPORTED;
 /* Returns 0 if F12 was pressed, 1 for button1, 2 for button2, 
    3 for button3 */
 int newtWinTernary(char * title, char * button1, char * button2, 
-		   char * button3, char * message, ...);
+		   char * button3, char * message, ...) EXPORTED;
 
 /* Returns the button number pressed, 0 on F12 */
 int newtWinMenu(char * title, char * text, int suggestedWidth, int flexDown, 
 		int flexUp, int maxListHeight, char ** items, int * listItem,
-		char * button1, ...);
+		char * button1, ...) EXPORTED;
 
 struct newtWinEntry {
     char * text;
@@ -386,7 +387,7 @@ struct newtWinEntry {
    dynamically allocated, and need to be freed. */
 int newtWinEntries(char * title, char * text, int suggestedWidth, int flexDown, 
 		   int flexUp, int dataWidth, 
-		   struct newtWinEntry * items, char * button1, ...);
+		   struct newtWinEntry * items, char * button1, ...) EXPORTED;
 
 #ifdef __cplusplus
 } /* End of extern "C" { */
